{"version":3,"sources":["SortingVisualiser/SortingVisualiser.jsx","SortingAlgorithms/SortingAlgorithms.js","App.js","serviceWorker.js","index.js"],"names":["SortingVisualiser","props","state","array","this","resetArray","min","max","i","push","Math","floor","random","setState","SortedArray","MergeSort","length","mididx","firsthalf","slice","secondhalf","j","SortingAlgorithms","console","log","className","map","value","idx","key","style","height","onClick","HeapSort","QuickSort","BubbleSort","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAIqBA,G,wDACjB,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAEDC,MAAQ,CAACC,MAAO,IAHP,E,gEAMdC,KAAKC,e,mCAKL,IADA,IA+CuBC,EAAKC,EA/CtBJ,EAAQ,GACNK,EAAI,EAAGA,EAAI,IAAKA,IAEpBL,EAAMM,MA4CaH,EA5Cc,EA4CTC,EA5CW,IA6CpCG,KAAKC,MAAMD,KAAKE,UAAYL,EAAID,EAAI,GAAKA,KA3C5CF,KAAKS,SAAS,CAACV,Y,kCAGf,IAAMW,ECvBW,SAAZC,EAAYZ,GACrB,GAAoB,IAAjBA,EAAMa,OAAc,OAAOb,EAO9B,IANA,IAAMc,EAASP,KAAKC,MAAMR,EAAMa,OAAO,GACjCE,EAAYH,EAAUZ,EAAMgB,MAAM,EAAEF,IACpCG,EAAaL,EAAUZ,EAAMgB,MAAMF,IACnCH,EAAc,GAChBN,EAAI,EAAGa,EAAI,EAETb,EAAIU,EAAUF,QAAUK,EAAID,EAAWJ,QACtCE,EAAUV,GAAKY,EAAWC,GACzBP,EAAYL,KAAKS,EAAUV,MAE3BM,EAAYL,KAAKW,EAAWC,MAIpC,KAAMb,EAAIU,EAAUF,QAChBF,EAAYL,KAAKS,EAAUV,MAC/B,KAAMa,EAAID,EAAWJ,QACjBF,EAAYL,KAAKW,EAAWC,MAChC,OAAOP,EDGiBQ,CAA4BlB,KAAKF,MAAMC,OAC3DoB,QAAQC,IAAIV,K,8IAaP,IAAD,OACGX,EAASC,KAAKF,MAAdC,MAEP,OACE,yBAAKsB,UAAU,mBACZtB,EAAMuB,KAAI,SAACC,EAAOC,GAAR,OACP,yBACIH,UAAU,YACVI,IAAMD,EACNE,MAAQ,CAACC,OAAO,GAAD,OAAKJ,EAAL,YAEvB,4BAAQK,QAAS,kBAAM,EAAK3B,eAA5B,sBACA,4BAAQ2B,QAAS,kBAAM,EAAKjB,cAA5B,cACA,4BAAQiB,QAAU,kBAAM,EAAKC,aAA7B,aACA,4BAAQD,QAAS,kBAAM,EAAKE,cAA5B,cACA,4BAAQF,QAAU,kBAAM,EAAKG,eAA7B,oB,GAhDmCC,IAAMC,Y,MEQtCC,MARf,WACE,OACE,yBAAKb,UAAU,OACd,kBAAC,EAAD,QCKec,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.9ace2bc2.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as SortingAlgorithms from '../SortingAlgorithms/SortingAlgorithms.js';\r\nimport './SortingVisualiser.css';\r\n/* we need to add buttons to generate new arrays and for different sorting algos*/\r\nexport default class SortingVisualiser extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n\r\n        this.state = {array: [],};        \r\n    }\r\n    componentDidMount(){\r\n        this.resetArray();\r\n    }\r\n\r\n    resetArray(){\r\n        const array = [];\r\n        for(let i = 0; i < 340; i++)\r\n        {\r\n            array.push(randomIntFromInterval(5,600));\r\n        }\r\n        this.setState({array});\r\n    }\r\n    MergeSort(){\r\n        const SortedArray = SortingAlgorithms.MergeSort(this.state.array);\r\n        console.log(SortedArray);\r\n\r\n    }\r\n    HeapSort(){\r\n\r\n    }\r\n    QuickSort(){\r\n\r\n    }\r\n    BubbleSort(){\r\n\r\n    }\r\n\r\n    render(){\r\n        const {array} = this.state;\r\n\r\n        return(\r\n          <div className=\"array-container\"> \r\n            {array.map((value, idx) => (\r\n                <div \r\n                    className=\"array-bar\" \r\n                    key ={idx}\r\n                    style ={{height: `${value}px`}}></div>\r\n            ))}\r\n            <button onClick={() => this.resetArray()}>Generate New Array</button>\r\n            <button onClick={() => this.MergeSort()}>Merge Sort</button>\r\n            <button onClick ={() => this.HeapSort()}>Heap Sort</button>\r\n            <button onClick={() => this.QuickSort()}>Quick Sort</button>\r\n            <button onClick ={() => this.BubbleSort()}>Bubble Sort</button>\r\n\r\n           </div> \r\n            );\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\nfunction randomIntFromInterval(min, max){\r\n    return Math.floor(Math.random() * (max-min+1) + min);\r\n}","export const MergeSort = array => {\r\n    if(array.length === 1) return array;\r\n    const mididx = Math.floor(array.length/2);\r\n    const firsthalf = MergeSort(array.slice(0,mididx));\r\n    const secondhalf = MergeSort(array.slice(mididx));\r\n    const SortedArray = [];\r\n    let i = 0, j = 0;\r\n    \r\n    while(i < firsthalf.length && j < secondhalf.length){\r\n        if(firsthalf[i] < secondhalf[j]){\r\n            SortedArray.push(firsthalf[i++]);\r\n        }else{\r\n            SortedArray.push(secondhalf[j++]);\r\n        }\r\n    }\r\n\r\n    while(i < firsthalf.length) \r\n        SortedArray.push(firsthalf[i++]);\r\n    while(j < secondhalf.length) \r\n        SortedArray.push(secondhalf[j++]);\r\n    return SortedArray;\r\n};","import React from 'react';\nimport SortingVisualiser from './SortingVisualiser/SortingVisualiser';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <SortingVisualiser></SortingVisualiser>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}